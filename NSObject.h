/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk/usr/lib/libobjc.A.dylib
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSString;

@interface NSObject <NSObject> {
    Class isa;
}

@property BOOL isAccessibilityElement;
@property(copy) NSString * accessibilityLabel;
@property(copy) NSString * accessibilityHint;
@property(copy) NSString * accessibilityValue;
@property unsigned long long accessibilityTraits;
@property struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } accessibilityFrame;
@property struct CGPoint { float x1; float x2; } accessibilityActivationPoint;
@property(retain) NSString * accessibilityLanguage;
@property BOOL accessibilityElementsHidden;
@property BOOL accessibilityViewIsModal;
@property BOOL shouldGroupAccessibilityChildren;

+ (Class)class;
+ (id)init;
+ (void)dealloc;
+ (int (*)())methodForSelector:(SEL)arg1;
+ (BOOL)conformsToProtocol:(id)arg1;
+ (id)forwardingTargetForSelector:(SEL)arg1;
+ (id)methodSignatureForSelector:(SEL)arg1;
+ (id)self;
+ (id)performSelector:(SEL)arg1 withObject:(id)arg2;
+ (id)performSelector:(SEL)arg1;
+ (BOOL)respondsToSelector:(SEL)arg1;
+ (BOOL)isEqual:(id)arg1;
+ (unsigned int)hash;
+ (id)mutableCopy;
+ (BOOL)isKindOfClass:(Class)arg1;
+ (void)forwardInvocation:(id)arg1;
+ (void)finalize;
+ (id)new;
+ (id)copy;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)alloc;
+ (unsigned int)retainCount;
+ (id)autorelease;
+ (oneway void)release;
+ (id)retain;
+ (BOOL)resolveClassMethod:(SEL)arg1;
+ (BOOL)resolveInstanceMethod:(SEL)arg1;
+ (void)initialize;
+ (void)load;
+ (BOOL)isFault;
+ (BOOL)_tryRetain;
+ (BOOL)_isDeallocating;
+ (id)description;
+ (void)doesNotRecognizeSelector:(SEL)arg1;
+ (BOOL)retainWeakReference;
+ (BOOL)allowsWeakReference;
+ (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
+ (id)copyWithZone:(struct _NSZone { }*)arg1;
+ (BOOL)isProxy;
+ (BOOL)instancesRespondToSelector:(SEL)arg1;
+ (BOOL)isSubclassOfClass:(Class)arg1;
+ (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (BOOL)isAncestorOfObject:(id)arg1;
+ (int (*)())instanceMethodForSelector:(SEL)arg1;
+ (Class)superclass;
+ (BOOL)isMemberOfClass:(Class)arg1;
+ (struct _NSZone { }*)zone;
+ (id)debugDescription;
+ (id)init;
+ (void)dealloc;
+ (id)_copyDescription;
+ (id)__allocWithZone_OA:(struct _NSZone { }*)arg1;
+ (id)methodSignatureForSelector:(SEL)arg1;
+ (void)finalize;
+ (void)load;
+ (id)description;
+ (void)doesNotRecognizeSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (BOOL)accessInstanceVariablesDirectly;
+ (id)_createMutableArrayValueGetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createOtherValueSetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createOtherValueGetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createValuePrimitiveSetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createValuePrimitiveGetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createMutableSetValueGetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createMutableOrderedSetValueGetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createValueSetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createValueGetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
+ (id)_keysForValuesAffectingValueForKey:(id)arg1;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (void)setKeys:(id)arg1 triggerChangeNotificationsForDependentKey:(id)arg2;
+ (BOOL)_shouldAddObservationForwardersForKey:(id)arg1;
+ (id)classFallbacksForKeyedArchiver;
+ (Class)classForKeyedUnarchiver;
+ (void)load;
+ (void)setVersion:(int)arg1;
+ (BOOL)instancesImplementSelector:(SEL)arg1;
+ (BOOL)implementsSelector:(SEL)arg1;
+ (int)version;
+ (void)cancelPreviousPerformRequestsWithTarget:(id)arg1;
+ (void)cancelPreviousPerformRequestsWithTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;
+ (const char *)_localClassNameForClass;
+ (struct objc_method_description { SEL x1; char *x2; }*)methodDescriptionForSelector:(SEL)arg1;
+ (struct objc_method_description { SEL x1; char *x2; }*)instanceMethodDescriptionForSelector:(SEL)arg1;
+ (id)replacementObjectForPortCoder:(id)arg1;
+ (id)CA_CAMLPropertyForKey:(id)arg1;
+ (int (*)())CA_getterForType:(int)arg1;
+ (int (*)())CA_setterForType:(int)arg1;
+ (BOOL)CA_encodesPropertyConditionally:(unsigned int)arg1 type:(int)arg2;
+ (BOOL)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (id)_webkit_invokeOnMainThread;
+ (BOOL)isKeyExcludedFromWebScript:(const char *)arg1;
+ (BOOL)isSelectorExcludedFromWebScript:(SEL)arg1;
+ (BOOL)__accessibilityGuidedAccessStateEnabled;
+ (void)_installAppearanceSwizzleForSetter:(id)arg1;
+ (id)_gkDefaultKeymap;
+ (void)cancelPreviousPerformRequestsWithNonRetainedTarget:(id)arg1;
+ (void)cancelPreviousPerformRequestsWithNonRetainedTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;
+ (void)performSelectorWithNonRetainedTarget:(id)arg1 selector:(SEL)arg2 withObject:(id)arg3 afterDelay:(double)arg4;
+ (void)mf_clearLocks;
+ (BOOL)overridesClassSelector:(SEL)arg1 ofBaseClass:(Class)arg2;
+ (BOOL)overridesSelector:(SEL)arg1 ofBaseClass:(Class)arg2;

- (Class)class;
- (id)init;
- (void)dealloc;
- (int (*)())methodForSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)self;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)isEqual:(id)arg1;
- (unsigned int)hash;
- (id)mutableCopy;
- (BOOL)isKindOfClass:(Class)arg1;
- (void)forwardInvocation:(id)arg1;
- (void)finalize;
- (id)copy;
- (unsigned int)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)isFault;
- (BOOL)_tryRetain;
- (BOOL)_isDeallocating;
- (id)description;
- (void)doesNotRecognizeSelector:(SEL)arg1;
- (BOOL)retainWeakReference;
- (BOOL)allowsWeakReference;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (Class)superclass;
- (BOOL)isMemberOfClass:(Class)arg1;
- (struct _NSZone { }*)zone;
- (id)debugDescription;
- (id)_copyDescription;
- (BOOL)___tryRetain_OA;
- (id)__autorelease_OA;
- (oneway void)__release_OA;
- (id)__retain_OA;
- (void)__dealloc_zombie;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)description;
- (void)doesNotRecognizeSelector:(SEL)arg1;
- (BOOL)isNSTimeZone__;
- (BOOL)isNSSet__;
- (BOOL)isNSOrderedSet__;
- (BOOL)isNSDate__;
- (BOOL)isNSData__;
- (BOOL)isNSDictionary__;
- (BOOL)isNSArray__;
- (BOOL)isNSNumber__;
- (BOOL)isNSString__;
- (BOOL)isNSValue__;
- (unsigned long)_cfTypeID;
- (Class)classForArchiver;
- (id)replacementObjectForArchiver:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)dictionaryWithValuesForKeys:(id)arg1;
- (void)setValuesForKeysWithDictionary:(id)arg1;
- (id)mutableSetValueForKey:(id)arg1;
- (id)mutableSetValueForKeyPath:(id)arg1;
- (id)mutableOrderedSetValueForKey:(id)arg1;
- (id)mutableOrderedSetValueForKeyPath:(id)arg1;
- (id)mutableArrayValueForKey:(id)arg1;
- (id)mutableArrayValueForKeyPath:(id)arg1;
- (BOOL)validateValue:(inout id*)arg1 forKey:(id)arg2 error:(out id*)arg3;
- (BOOL)validateValue:(inout id*)arg1 forKeyPath:(id)arg2 error:(out id*)arg3;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (id)valueForKeyPath:(id)arg1;
- (void)setNilValueForKey:(id)arg1;
- (id)valueForKey:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (BOOL)_isKVOA;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)removeObserver:(id)arg1 forKeyPath:(id)arg2 context:(void*)arg3;
- (void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned int)arg3 context:(void*)arg4;
- (void)_removeObserver:(id)arg1 forProperty:(id)arg2;
- (void)removeObserver:(id)arg1 forKeyPath:(id)arg2;
- (void)_addObserver:(id)arg1 forProperty:(id)arg2 options:(unsigned int)arg3 context:(void*)arg4;
- (void)didChangeValueForKey:(id)arg1;
- (void)willChangeValueForKey:(id)arg1;
- (void)didChangeValueForKey:(id)arg1 withSetMutation:(unsigned int)arg2 usingObjects:(id)arg3;
- (void)willChangeValueForKey:(id)arg1 withSetMutation:(unsigned int)arg2 usingObjects:(id)arg3;
- (void)didChange:(unsigned int)arg1 valuesAtIndexes:(id)arg2 forKey:(id)arg3;
- (void)willChange:(unsigned int)arg1 valuesAtIndexes:(id)arg2 forKey:(id)arg3;
- (void)setObservationInfo:(void*)arg1;
- (void*)observationInfo;
- (void)_didChangeValuesForKeys:(id)arg1;
- (void)_willChangeValuesForKeys:(id)arg1;
- (void)_changeValueForKey:(id)arg1 usingBlock:(id)arg2;
- (void)_notifyObserversForKeyPath:(id)arg1 change:(id)arg2;
- (void)_changeValueForKey:(id)arg1 key:(id)arg2 key:(id)arg3 usingBlock:(id)arg4;
- (id)_implicitObservationInfo;
- (id)replacementObjectForKeyedArchiver:(id)arg1;
- (Class)classForKeyedArchiver;
- (BOOL)implementsSelector:(SEL)arg1;
- (BOOL)_allowsDirectEncoding;
- (id)awakeAfterUsingCoder:(id)arg1;
- (id)replacementObjectForCoder:(id)arg1;
- (Class)classForCoder;
- (id)autoContentAccessingProxy;
- (void)performSelector:(SEL)arg1 object:(id)arg2 afterDelay:(double)arg3;
- (void)performSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3;
- (void)performSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 inModes:(id)arg4;
- (void)performSelector:(SEL)arg1 onThread:(id)arg2 withObject:(id)arg3 waitUntilDone:(BOOL)arg4;
- (void)performSelectorOnMainThread:(SEL)arg1 withObject:(id)arg2 waitUntilDone:(BOOL)arg3 modes:(id)arg4;
- (void)performSelectorInBackground:(SEL)arg1 withObject:(id)arg2;
- (void)performSelectorOnMainThread:(SEL)arg1 withObject:(id)arg2 waitUntilDone:(BOOL)arg3;
- (void)performSelector:(SEL)arg1 onThread:(id)arg2 withObject:(id)arg3 waitUntilDone:(BOOL)arg4 modes:(id)arg5;
- (const char *)_localClassNameForClass;
- (struct objc_method_description { SEL x1; char *x2; }*)methodDescriptionForSelector:(SEL)arg1;
- (BOOL)_conformsToProtocolNamed:(const char *)arg1;
- (id)replacementObjectForPortCoder:(id)arg1;
- (Class)classForPortCoder;
- (id)pep_getInvocation:(id*)arg1;
- (id)pep_onOperationQueue:(id)arg1;
- (id)pep_afterDelay:(double)arg1;
- (id)pep_onDetachedThread;
- (id)pep_onMainThreadIfNecessary;
- (id)pep_onOperationQueue:(id)arg1 priority:(int)arg2;
- (id)pep_onThread:(id)arg1 immediateForMatchingThread:(BOOL)arg2;
- (id)pep_onThread:(id)arg1;
- (id)pep_onMainThread;
- (BOOL)isNull;
- (void)performSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 ignoreMenuTracking:(BOOL)arg4;
- (id)__im_getInvocation:(id*)arg1;
- (id)__im_onDetachedThread;
- (id)__im_onMainThreadIfNecessary;
- (id)__im_onMainThread;
- (id)__im_onThread:(id)arg1 immediateForMatchingThread:(BOOL)arg2;
- (id)__im_onThread:(id)arg1;
- (id)__im_afterDelay:(double)arg1 modes:(id)arg2;
- (id)__im_afterDelay:(double)arg1;
- (void)CA_prepareRenderValue;
- (struct Object { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; }*)CA_copyRenderValue;
- (id)CA_interpolateValues:(id)arg1 :(id)arg2 :(id)arg3 interpolator:(const struct ValueInterpolator { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; boolx10; }*)arg4;
- (float)CA_distanceToValue:(id)arg1;
- (id)CA_interpolateValue:(id)arg1 byFraction:(float)arg2;
- (id)CA_addValue:(id)arg1 multipliedBy:(int)arg2;
- (void)releaseOnMainThread;
- (id)_webkit_invokeOnMainThread;
- (void)_connectInterfaceBuilderEventConnection:(id)arg1;
- (void)awakeFromNib;
- (id)accessibilityContainer;
- (id)accessibilityLabel;
- (BOOL)isAccessibilityElement;
- (void)setAccessibilityValue:(id)arg1;
- (id)accessibilityValue;
- (void)setAccessibilityLabel:(id)arg1;
- (void)setShouldGroupAccessibilityChildren:(BOOL)arg1;
- (void)setAccessibilityIdentifier:(id)arg1;
- (void)setAccessibilityLanguage:(id)arg1;
- (void)setAccessibilityContainer:(id)arg1;
- (void)setIsAccessibilityElement:(BOOL)arg1;
- (void)setAccessibilityTraits:(unsigned long long)arg1;
- (void)setAccessibilityActivationPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)setAccessibilityFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setAccessibilityHint:(id)arg1;
- (void)setAccessibilityViewIsModal:(BOOL)arg1;
- (void)setAccessibilityElementsHidden:(BOOL)arg1;
- (id)storedAccessibilityActivationPoint;
- (id)storedAccessibilityFrame;
- (id)storedIsAccessibilityElement;
- (id)storedAccessibilityTraits;
- (BOOL)shouldGroupAccessibilityChildren;
- (BOOL)accessibilityElementsHidden;
- (BOOL)accessibilityViewIsModal;
- (id)accessibilityIdentifier;
- (id)accessibilityLanguage;
- (unsigned long long)accessibilityTraits;
- (struct CGPoint { float x1; float x2; })accessibilityActivationPoint;
- (id)accessibilityHint;
- (id)storedShouldGroupAccessibilityChildren;
- (id)storedAccessibilityElementsHidden;
- (id)storedAccessibilityViewIsModal;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })accessibilityFrame;
- (BOOL)accessibilityElementIsFocused;
- (void)accessibilityElementDidLoseFocus;
- (void)accessibilityElementDidBecomeFocused;
- (BOOL)accessibilityPerformMagicTap;
- (BOOL)accessibilityPerformEscape;
- (BOOL)accessibilityScroll:(int)arg1;
- (void)accessibilityDecrement;
- (void)accessibilityIncrement;
- (int)indexOfAccessibilityElement:(id)arg1;
- (id)accessibilityElementAtIndex:(int)arg1;
- (int)accessibilityElementCount;
- (void)accessibilitySetIdentification:(id)arg1;
- (void)_accessibilityFinalize;
- (BOOL)isElementAccessibilityExposedToInterfaceBuilder;
- (BOOL)isAccessibilityElementByDefault;
- (unsigned long long)defaultAccessibilityTraits;
- (id)className;
- (void)fromMainThreadPostNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3;
- (void)fromNotifySafeThreadPostNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3;
- (void)disallowSafePerformSelector;
- (void)allowSafePerformSelector;
- (void)fromNotifySafeThreadPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (BOOL)okToNotifyFromThisThread;
- (void)postNotificationWithDescription:(id)arg1;
- (long)becomeInactive;
- (long)becomeActive;
- (id)_ICSStringWithOptions:(unsigned int)arg1;
- (void)_ICSStringWithOptions:(unsigned int)arg1 appendingToString:(id)arg2;
- (void)_gkSetupAccountWithParamaters:(id)arg1 completionHandler:(id)arg2;
- (id)_gkAuthenticatedPlayerID;
- (void)_gkPopulateWithObject:(id)arg1 keymap:(id)arg2;
- (id)_gkDescriptionWithChildren:(int)arg1;
- (id)_gkDescription;
- (id)mainThreadProxy;
- (id)delayedProxy:(double)arg1;
- (id)blockingMainThreadProxy;
- (void)MLBindToSQLiteStatement:(struct sqlite3_stmt { }*)arg1 atPosition:(int)arg2;
- (void)_nonRetainingPerformSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 inModes:(id)arg4;
- (void)unregisterForTimeMarkerNotifications;
- (void)registerForTimeMarkerNotificationsIfNecessaryForPlayer:(id)arg1;
- (void)__crossedTimeMarkerNotification:(id)arg1;
- (id)MPMediaLibraryDataProviderSystemML3CoercedString;
- (BOOL)setAudioVideoControllerRepeatMode:(int)arg1;
- (int)audioVideoControllerRepeatMode;
- (BOOL)isNull;
- (BOOL)mf_tryLockWithPriority;
- (void)mf_lockWithPriority;
- (BOOL)mf_tryLock;
- (void)_mf_checkToAllowLock:(id)arg1;
- (void)_mf_checkToAllowExclusiveLocksWithLock:(id)arg1;
- (void)_mf_checkToAllowStrictProgressionWithLock:(id)arg1;
- (void)_mf_checkToAllowOrderingWithLock:(id)arg1;
- (BOOL)_mf_ntsIsLocked;
- (void)_mf_dumpLockCallStacks:(unsigned int)arg1 ordering:(id)arg2;
- (id)_mf_lockOrderingForType:(int)arg1;
- (id)mf_exclusiveLocks;
- (id)mf_strictLockOrdering;
- (id)mf_lockOrdering;
- (void)mf_unlock;
- (void)mf_lock;
- (void)appendJsonStringToString:(id)arg1;
- (BOOL)setAudioVideoControllerRepeatMode:(int)arg1;
- (int)audioVideoControllerRepeatMode;

@end
