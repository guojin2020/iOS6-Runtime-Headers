/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk/System/Library/PrivateFrameworks/WebKit.framework/WebKit
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class WebHTMLViewPrivate;

@interface WebHTMLView : WAKView <WebDocumentSelection, WebDocumentIncrementalSearching, WebDocumentElement, WebMultipleTextMatches, WebDocumentOptionsSearching, WebDocumentView, WebDocumentSearching> {
    WebHTMLViewPrivate *_private;
}

+ (id)unsupportedTextMIMETypes;
+ (id)supportedImageMIMETypes;
+ (id)supportedMIMETypes;
+ (id)supportedNonImageMIMETypes;
+ (void)initialize;

- (void)viewDidMoveToWindow;
- (void)willRemoveSubview:(id)arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)resignFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)touch:(id)arg1;
- (void)keyUp:(id)arg1;
- (void)keyDown:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)viewWillDraw;
- (void)drawSingleRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)scrollWheel:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (BOOL)acceptsFirstResponder;
- (id)rectsForTextMatches;
- (void)unmarkAllTextMatches;
- (BOOL)markedTextMatchesAreHighlighted;
- (void)setMarkedTextMatchesAreHighlighted:(BOOL)arg1;
- (unsigned int)countMatchesForText:(id)arg1 inDOMRange:(id)arg2 options:(unsigned int)arg3 limit:(unsigned int)arg4 markMatches:(BOOL)arg5;
- (id)elementAtPoint:(struct CGPoint { float x1; float x2; })arg1 allowShadowContent:(BOOL)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })selectionImageRect;
- (struct CGImage { }*)selectionImageForcingBlackText:(BOOL)arg1;
- (id)selectionTextRects;
- (BOOL)_findString:(id)arg1 options:(unsigned int)arg2;
- (int)conversationIdentifier;
- (struct _NSRange { unsigned int x1; unsigned int x2; })markedRange;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })firstRectForCharacterRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (unsigned int)characterIndexForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)_destroyAllWebPlugins;
- (void)_executeSavedKeypressCommands;
- (BOOL)_canSmartCopyOrDelete;
- (void)doCommandBySelector:(SEL)arg1;
- (void)insertText:(id)arg1;
- (void)_updateSelectionForInputManager;
- (BOOL)_wantsKeyDownForEvent:(id)arg1;
- (void)makeBaseWritingDirectionNatural:(id)arg1;
- (void)capitalizeWord:(id)arg1;
- (void)lowercaseWord:(id)arg1;
- (void)uppercaseWord:(id)arg1;
- (void)_applyStyleToSelection:(id)arg1 withUndoAction:(int)arg2;
- (id)_emptyStyle;
- (void)centerSelectionInVisibleArea:(id)arg1;
- (BOOL)_isSelectionEvent:(id)arg1;
- (void)setNeedsToApplyStyles:(BOOL)arg1;
- (void)reapplyStyles;
- (void)_web_makePluginSubviewsPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (void)jumpToSelection:(id)arg1;
- (void)yankAndSelect:(id)arg1;
- (void)yank:(id)arg1;
- (void)unscript:(id)arg1;
- (void)underline:(id)arg1;
- (void)transpose:(id)arg1;
- (void)swapWithMark:(id)arg1;
- (void)superscript:(id)arg1;
- (void)subscript:(id)arg1;
- (void)setMark:(id)arg1;
- (void)selectToMark:(id)arg1;
- (void)selectSentence:(id)arg1;
- (void)selectParagraph:(id)arg1;
- (void)selectLine:(id)arg1;
- (void)pasteAsPlainText:(id)arg1;
- (void)pageUpAndModifySelection:(id)arg1;
- (void)pageUp:(id)arg1;
- (void)pageDownAndModifySelection:(id)arg1;
- (void)pageDown:(id)arg1;
- (void)outdent:(id)arg1;
- (void)moveWordRightAndModifySelection:(id)arg1;
- (void)moveWordRight:(id)arg1;
- (void)moveWordLeftAndModifySelection:(id)arg1;
- (void)moveWordLeft:(id)arg1;
- (void)moveWordForwardAndModifySelection:(id)arg1;
- (void)moveWordForward:(id)arg1;
- (void)moveWordBackwardAndModifySelection:(id)arg1;
- (void)moveWordBackward:(id)arg1;
- (void)moveUpAndModifySelection:(id)arg1;
- (void)moveToRightEndOfLineAndModifySelection:(id)arg1;
- (void)moveToRightEndOfLine:(id)arg1;
- (void)moveToLeftEndOfLineAndModifySelection:(id)arg1;
- (void)moveToLeftEndOfLine:(id)arg1;
- (void)moveToEndOfSentenceAndModifySelection:(id)arg1;
- (void)moveToEndOfSentence:(id)arg1;
- (void)moveToEndOfParagraphAndModifySelection:(id)arg1;
- (void)moveToEndOfParagraph:(id)arg1;
- (void)moveToEndOfLineAndModifySelection:(id)arg1;
- (void)moveToEndOfLine:(id)arg1;
- (void)moveToEndOfDocumentAndModifySelection:(id)arg1;
- (void)moveToEndOfDocument:(id)arg1;
- (void)moveToBeginningOfSentenceAndModifySelection:(id)arg1;
- (void)moveToBeginningOfSentence:(id)arg1;
- (void)moveToBeginningOfParagraphAndModifySelection:(id)arg1;
- (void)moveToBeginningOfParagraph:(id)arg1;
- (void)moveToBeginningOfLineAndModifySelection:(id)arg1;
- (void)moveToBeginningOfLine:(id)arg1;
- (void)moveToBeginningOfDocumentAndModifySelection:(id)arg1;
- (void)moveToBeginningOfDocument:(id)arg1;
- (void)moveRightAndModifySelection:(id)arg1;
- (void)moveRight:(id)arg1;
- (void)moveParagraphForwardAndModifySelection:(id)arg1;
- (void)moveParagraphBackwardAndModifySelection:(id)arg1;
- (void)moveLeftAndModifySelection:(id)arg1;
- (void)moveLeft:(id)arg1;
- (void)moveForwardAndModifySelection:(id)arg1;
- (void)moveDownAndModifySelection:(id)arg1;
- (void)moveBackwardAndModifySelection:(id)arg1;
- (void)makeTextWritingDirectionNatural:(id)arg1;
- (void)insertTabIgnoringFieldEditor:(id)arg1;
- (void)insertParagraphSeparator:(id)arg1;
- (void)insertNewlineIgnoringFieldEditor:(id)arg1;
- (void)insertLineBreak:(id)arg1;
- (void)indent:(id)arg1;
- (void)ignoreSpelling:(id)arg1;
- (void)deleteWordForward:(id)arg1;
- (void)deleteWordBackward:(id)arg1;
- (void)deleteToMark:(id)arg1;
- (void)deleteToEndOfParagraph:(id)arg1;
- (void)deleteToEndOfLine:(id)arg1;
- (void)deleteToBeginningOfParagraph:(id)arg1;
- (void)deleteToBeginningOfLine:(id)arg1;
- (void)deleteForward:(id)arg1;
- (void)deleteBackwardByDecomposingPreviousCharacter:(id)arg1;
- (void)alignRight:(id)arg1;
- (void)alignLeft:(id)arg1;
- (void)alignJustified:(id)arg1;
- (void)alignCenter:(id)arg1;
- (void)executeCoreCommandByName:(const char *)arg1;
- (BOOL)searchFor:(id)arg1 direction:(BOOL)arg2 caseSensitive:(BOOL)arg3 wrap:(BOOL)arg4;
- (void)_windowChangedKeyState;
- (void)_updateControlTints;
- (void)_changeWordCaseWithSelector:(SEL)arg1;
- (void)selectWord:(id)arg1;
- (id)_accessibilityParentForSubview:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint { float x1; float x2; })arg1;
- (id)accessibilityFocusedUIElement;
- (void)clearFocus;
- (id)elementAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)searchFor:(id)arg1 direction:(BOOL)arg2 caseSensitive:(BOOL)arg3 wrap:(BOOL)arg4 startInSelection:(BOOL)arg5;
- (void)layoutToMinimumPageWidth:(float)arg1 height:(float)arg2 originalPageWidth:(float)arg3 originalPageHeight:(float)arg4 maximumShrinkRatio:(float)arg5 adjustingViewSize:(BOOL)arg6;
- (BOOL)maintainsInactiveSelection;
- (void)executeCoreCommandBySelector:(SEL)arg1;
- (struct Command { struct EditorInternalCommand {} *x1; int x2; struct RefPtr<WebCore::Frame> { struct Frame {} *x_3_1_1; } x3; })coreCommandByName:(const char *)arg1;
- (struct Command { struct EditorInternalCommand {} *x1; int x2; struct RefPtr<WebCore::Frame> { struct Frame {} *x_3_1_1; } x3; })coreCommandBySelector:(SEL)arg1;
- (BOOL)callDelegateDoCommandBySelectorIfNeeded:(SEL)arg1;
- (void)markedTextUpdate:(id)arg1;
- (id)accessibilityRootElement;
- (void)_endScreenPaginationMode;
- (BOOL)_beginScreenPaginationModeWithPageSize:(struct CGSize { float x1; float x2; })arg1 shrinkToFit:(BOOL)arg2;
- (BOOL)_beginPrintModeWithPageWidth:(float)arg1 height:(float)arg2 shrinkToFit:(BOOL)arg3;
- (id)_compositingLayersHostingView;
- (BOOL)_isUsingAcceleratedCompositing;
- (BOOL)_hasHTMLDocument;
- (void)_removeHighlighterOfType:(id)arg1;
- (void)_setHighlighter:(id)arg1 ofType:(id)arg2;
- (void)_decreaseSelectionListLevel;
- (id)_increaseSelectionListLevelUnordered;
- (id)_increaseSelectionListLevelOrdered;
- (id)_increaseSelectionListLevel;
- (BOOL)_canDecreaseSelectionListLevel;
- (BOOL)_canIncreaseSelectionListLevel;
- (id)_insertUnorderedList;
- (id)_insertOrderedList;
- (void)_setTransparentBackground:(BOOL)arg1;
- (BOOL)_transparentBackground;
- (BOOL)_hasInsertionPoint;
- (BOOL)_canAlterCurrentSelection;
- (BOOL)_canEditRichly;
- (BOOL)_canEdit;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_selectionRect;
- (void)_startAutoscrollTimer:(id)arg1;
- (BOOL)_insideAnotherHTMLView;
- (void)_restoreSubviews;
- (void)_setAsideSubviews;
- (BOOL)_isInPrintMode;
- (void)_setPrinting:(BOOL)arg1 minimumPageLogicalWidth:(float)arg2 logicalHeight:(float)arg3 originalPageWidth:(float)arg4 originalPageHeight:(float)arg5 maximumShrinkRatio:(float)arg6 adjustViewSize:(BOOL)arg7 paginateScreenContent:(BOOL)arg8;
- (BOOL)_isInScreenPaginationMode;
- (void)_clearLastHitViewIfSelf;
- (BOOL)_isEditable;
- (BOOL)_hasSelectionOrInsertionPoint;
- (void)_stopAutoscrollTimer;
- (void)_autoscroll;
- (void)setScale:(float)arg1;
- (void)_layoutIfNeeded;
- (void)_web_updateLayoutAndStyleIfNeededRecursive;
- (BOOL)_isTopHTMLView;
- (void)_setMouseDownEvent:(id)arg1;
- (BOOL)_shouldDeleteRange:(id)arg1;
- (BOOL)_shouldReplaceSelectionWithText:(id)arg1 givenAction:(int)arg2;
- (BOOL)_shouldInsertFragment:(id)arg1 replacingDOMRange:(id)arg2 givenAction:(int)arg3;
- (id)_frameView;
- (id)_topHTMLView;
- (BOOL)_shouldInsertText:(id)arg1 replacingDOMRange:(id)arg2 givenAction:(int)arg3;
- (id)_selectedRange;
- (id)_frame;
- (void)viewDidMoveToHostWindow;
- (void)viewWillMoveToHostWindow:(id)arg1;
- (void)closeIfNotCurrentView;
- (id)_pluginController;
- (void)layout;
- (void)setNeedsLayout:(BOOL)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })selectionRect;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2;
- (BOOL)_needsLayout;
- (id)_dataSource;
- (BOOL)_web_isDrawingIntoLayer;
- (BOOL)_hasSelection;
- (void)deselectAll;
- (id)selectedString;
- (BOOL)supportsTextEncoding;
- (void)insertNewline:(id)arg1;
- (void)insertTab:(id)arg1;
- (void)insertBacktab:(id)arg1;
- (void)moveDown:(id)arg1;
- (void)moveUp:(id)arg1;
- (void)deleteBackward:(id)arg1;
- (BOOL)_handleEditingKeyEvent:(struct KeyboardEvent { int (**x1)(); int x2; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; boolx4; boolx5; boolx6; boolx7; boolx8; boolx9; boolx10; unsigned short x11; struct EventTarget {} *x12; struct RefPtr<WebCore::EventTarget> { struct EventTarget {} *x_13_1_1; } x13; unsigned long long x14; struct RefPtr<WebCore::Event> { struct Event {} *x_15_1_1; } x15; struct RefPtr<WebCore::DOMWindow> { struct DOMWindow {} *x_16_1_1; } x16; int x17; unsigned int x18 : 1; unsigned int x19 : 1; unsigned int x20 : 1; unsigned int x21 : 1; struct OwnPtr<WebCore::PlatformKeyboardEvent> { struct PlatformKeyboardEvent {} *x_22_1_1; } x22; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_23_1_1; } x23; unsigned int x24; unsigned int x25 : 1; struct Vector<WebCore::KeypressCommand, 0> { unsigned int x_26_1_1; struct VectorBuffer<WebCore::KeypressCommand, 0> { struct KeypressCommand {} *x_2_2_1; unsigned int x_2_2_2; } x_26_1_2; } x26; }*)arg1;
- (void)_selectionChanged;
- (id)_documentRange;
- (void)setDataSource:(id)arg1;
- (id)_webView;
- (void)dataSourceUpdated:(id)arg1;
- (void)detachRootLayer;
- (void)attachRootLayer:(id)arg1;
- (id)_highlighterForType:(id)arg1;
- (void)_setToolTip:(id)arg1;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (BOOL)isOpaque;
- (void)layoutIfNeeded;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)hitTest:(struct CGPoint { float x1; float x2; })arg1;
- (void)addSubview:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)dealloc;
- (void)close;
- (id)string;
- (void)finalize;
- (void)delete:(id)arg1;
- (void)_frameOrBoundsChanged;
- (void)_endPrintMode;
- (float)_adjustedBottomOfPageWithTop:(float)arg1 bottom:(float)arg2 limit:(float)arg3;
- (BOOL)_beginPrintModeWithMinimumPageWidth:(float)arg1 height:(float)arg2 maximumPageWidth:(float)arg3;
- (void)toggleItalic:(id)arg1;
- (void)toggleBold:(id)arg1;
- (void)moveForward:(id)arg1;
- (void)moveBackward:(id)arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })selectedRange;
- (void)unmarkText;
- (void)paste:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (void)copy:(id)arg1;
- (void)cut:(id)arg1;
- (void)clearText:(id)arg1;
- (void)selectAll;
- (void)selectAll:(id)arg1;
- (BOOL)hasMarkedText;
- (id)selectionView;
- (void)viewWillMoveToWindow:(id)arg1;
- (oneway void)_webcore_releaseOnWebThread;
- (oneway void)release;

@end
