/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk/System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

@class ML3MusicLibrary, MLSQLiteStatement, NSArray;

@interface ML3SpotlightMatchPredicate : ML3Predicate  {
    ML3MusicLibrary *_library;
    MLSQLiteStatement *_lookupStatement;
    struct sqlite3 { } *_db;
    struct unordered_map<long long, NSString *, std::tr1::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, NSString *>>, false> { 
        struct _Select1st<std::pair<const long long, NSString *> > { } _M_extract; 
        struct equal_to<long long> { } _M_eq; 
        struct hash<long long> { } _M_h1; 
        struct _Mod_range_hashing { } _M_h2; 
        struct allocator<std::tr1::__detail::_Hash_node<std::pair<const long long, NSString *>, false> > { } _M_node_allocator; 
        struct _Hash_node<std::pair<const long long, NSString *>, false> {} **_M_buckets; 
        unsigned int _M_bucket_count; 
        unsigned int _M_element_count; 
        struct _Prime_rehash_policy { 
            float _M_max_load_factor; 
            float _M_growth_factor; 
            unsigned long _M_next_resize; 
        } _M_rehash_policy; 
    } _matchingNames;
    struct unordered_map<long long, NSString *, std::tr1::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, NSString *>>, false> { 
        struct _Select1st<std::pair<const long long, NSString *> > { } _M_extract; 
        struct equal_to<long long> { } _M_eq; 
        struct hash<long long> { } _M_h1; 
        struct _Mod_range_hashing { } _M_h2; 
        struct allocator<std::tr1::__detail::_Hash_node<std::pair<const long long, NSString *>, false> > { } _M_node_allocator; 
        struct _Hash_node<std::pair<const long long, NSString *>, false> {} **_M_buckets; 
        unsigned int _M_bucket_count; 
        unsigned int _M_element_count; 
        struct _Prime_rehash_policy { 
            float _M_max_load_factor; 
            float _M_growth_factor; 
            unsigned long _M_next_resize; 
        } _M_rehash_policy; 
    } _cachedNames;
    NSArray *_searchProperties;
}

@property(retain) NSArray * searchProperties;


- (void)setSearchProperties:(id)arg1;
- (id)searchProperties;
- (id)initWithLibrary:(id)arg1;
- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;

@end
