/* Generated by RuntimeBrowser.
   Image: /Users/steipete/Library/Application Support/iPhone Simulator/6.0/Applications/169BE991-A55A-4056-B56F-2FCCE879D4E7/OCRuntime.app/OCRuntime
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class GCDAsyncReadPacket, NSMutableData, NSObject<OS_dispatch_source>, NSObject<OS_dispatch_queue>, GCDAsyncWritePacket, NSMutableArray, NSData;

@interface GCDAsyncSocket : NSObject  {
    unsigned short flags;
    unsigned short config;
    id delegate;
    NSObject<OS_dispatch_queue> *delegateQueue;
    int socket4FD;
    int socket6FD;
    int connectIndex;
    NSData *connectInterface4;
    NSData *connectInterface6;
    NSObject<OS_dispatch_queue> *socketQueue;
    NSObject<OS_dispatch_source> *accept4Source;
    NSObject<OS_dispatch_source> *accept6Source;
    NSObject<OS_dispatch_source> *connectTimer;
    NSObject<OS_dispatch_source> *readSource;
    NSObject<OS_dispatch_source> *writeSource;
    NSObject<OS_dispatch_source> *readTimer;
    NSObject<OS_dispatch_source> *writeTimer;
    NSMutableArray *readQueue;
    NSMutableArray *writeQueue;
    GCDAsyncReadPacket *currentRead;
    GCDAsyncWritePacket *currentWrite;
    unsigned long socketFDBytesAvailable;
    NSMutableData *partialReadBuffer;
    struct { 
        int version; 
        void *info; 
        int (*retain)(); 
        int (*release)(); 
        int (*copyDescription)(); 
    } streamContext;
    struct __CFReadStream { } *readStream;
    struct __CFWriteStream { } *writeStream;
}

+ (id)ZeroData;
+ (id)LFData;
+ (id)CRData;
+ (unsigned short)portFromAddress:(id)arg1;
+ (id)hostFromAddress:(id)arg1;
+ (BOOL)getHost:(id*)arg1 port:(unsigned short*)arg2 fromAddress:(id)arg3;
+ (void)addHandshakeListener:(id)arg1;
+ (void)startHandshakeThreadIfNeeded;
+ (void)sslHandshakeThread;
+ (unsigned short)portFromAddress6:(struct sockaddr_in6 { unsigned char x1; unsigned char x2; unsigned short x3; unsigned int x4; struct in6_addr { union { unsigned char x_1_2_1[16]; unsigned short x_1_2_2[8]; unsigned int x_1_2_3[4]; } x_5_1_1; } x5; unsigned int x6; }*)arg1;
+ (unsigned short)portFromAddress4:(struct sockaddr_in { unsigned char x1; unsigned char x2; unsigned short x3; struct in_addr { unsigned int x_4_1_1; } x4; BOOL x5[8]; }*)arg1;
+ (id)hostFromAddress6:(struct sockaddr_in6 { unsigned char x1; unsigned char x2; unsigned short x3; unsigned int x4; struct in6_addr { union { unsigned char x_1_2_1[16]; unsigned short x_1_2_2[8]; unsigned int x_1_2_3[4]; } x_5_1_1; } x5; unsigned int x6; }*)arg1;
+ (id)hostFromAddress4:(struct sockaddr_in { unsigned char x1; unsigned char x2; unsigned short x3; struct in_addr { unsigned int x_4_1_1; } x4; BOOL x5[8]; }*)arg1;
+ (void)removeHandshakeListener:(id)arg1;
+ (id)CRLFData;

- (void)disconnect;
- (id)init;
- (void)dealloc;
- (void)performBlock:(id)arg1;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (BOOL)enableBackgroundingOnSocketWithCaveat;
- (BOOL)enableBackgroundingOnSocket;
- (struct __CFWriteStream { }*)writeStream;
- (struct __CFReadStream { }*)readStream;
- (int)socket6FD;
- (int)socket4FD;
- (int)socketFD;
- (void)abortSSLHandshake:(id)arg1;
- (void)finishSSLHandshake;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned int)arg4 tag:(long)arg5;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 tag:(long)arg3;
- (void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned int)arg3 tag:(long)arg4;
- (void)readDataWithTimeout:(double)arg1 tag:(long)arg2;
- (BOOL)isIPv6;
- (BOOL)isIPv4;
- (id)localAddress;
- (id)connectedAddress;
- (unsigned short)localPort6;
- (id)localHost6;
- (id)localHost4;
- (unsigned short)connectedPort6;
- (unsigned short)connectedPort4;
- (id)connectedHost6;
- (id)connectedHost4;
- (id)localHost;
- (BOOL)isConnected;
- (id)sslError:(long)arg1;
- (id)errnoError;
- (void)disconnectAfterReadingAndWriting;
- (void)disconnectAfterReading;
- (BOOL)connectToAddress:(id)arg1 withTimeout:(double)arg2 error:(id*)arg3;
- (BOOL)connectToAddress:(id)arg1 error:(id*)arg2;
- (BOOL)connectToHost:(id)arg1 onPort:(unsigned short)arg2 error:(id*)arg3;
- (BOOL)acceptOnPort:(unsigned short)arg1 error:(id*)arg2;
- (void)setPreferIPv4OverIPv6:(BOOL)arg1;
- (BOOL)isIPv4PreferredOverIPv6;
- (void)setIPv6Enabled:(BOOL)arg1;
- (BOOL)isIPv6Enabled;
- (void)setIPv4Enabled:(BOOL)arg1;
- (BOOL)isIPv4Enabled;
- (void)setAutoDisconnectOnClosedReadStream:(BOOL)arg1;
- (BOOL)autoDisconnectOnClosedReadStream;
- (void)getDelegate:(id*)arg1 delegateQueue:(id*)arg2;
- (void)setDelegateQueue:(id)arg1;
- (id)delegateQueue;
- (id)initWithSocketQueue:(id)arg1;
- (BOOL)enableBackgroundingOnSocketWithCaveat:(BOOL)arg1;
- (BOOL)createReadAndWriteStream;
- (id)writeTimeoutError;
- (void)doWriteTimeoutWithExtension:(double)arg1;
- (void)doWriteTimeout;
- (void)completeCurrentWrite;
- (void)suspendWriteSource;
- (void)setupWriteTimerWithTimeout:(double)arg1;
- (id)readTimeoutError;
- (void)doReadTimeoutWithExtension:(double)arg1;
- (void)doReadTimeout;
- (id)connectionClosedError;
- (void)completeCurrentRead;
- (id)readMaxedOutError;
- (void)suspendReadSource;
- (BOOL)usingCFStream;
- (void)setupReadTimerWithTimeout:(double)arg1;
- (void)maybeStartTLS;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned int)arg4 maxLength:(unsigned int)arg5 tag:(long)arg6;
- (void)readDataToLength:(unsigned int)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned int)arg4 tag:(long)arg5;
- (void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned int)arg3 maxLength:(unsigned int)arg4 tag:(long)arg5;
- (void)doWriteData;
- (void)doReadEOF;
- (void)doReadData;
- (unsigned short)localPortFromSocket6:(int)arg1;
- (unsigned short)localPortFromSocket4:(int)arg1;
- (id)localHostFromSocket6:(int)arg1;
- (id)localHostFromSocket4:(int)arg1;
- (unsigned short)connectedPortFromSocket6:(int)arg1;
- (unsigned short)connectedPortFromSocket4:(int)arg1;
- (id)connectedHostFromSocket6:(int)arg1;
- (id)connectedHostFromSocket4:(int)arg1;
- (void)maybeClose;
- (void)resumeWriteSource;
- (void)endCurrentWrite;
- (void)endCurrentRead;
- (id)connectTimeoutError;
- (void)doConnectTimeout;
- (void)maybeDequeueWrite;
- (void)maybeDequeueRead;
- (unsigned short)connectedPort;
- (id)connectedHost;
- (void)didNotConnect:(int)arg1 error:(id)arg2;
- (void)didConnect:(int)arg1;
- (void)endConnectTimeout;
- (id)otherError:(id)arg1;
- (void)lookup:(int)arg1 didSucceedWithAddress4:(id)arg2 address6:(id)arg3;
- (void)lookup:(int)arg1 didFail:(id)arg2;
- (id)gaiError:(int)arg1;
- (BOOL)connectWithAddress4:(id)arg1 address6:(id)arg2 error:(id*)arg3;
- (BOOL)connectToAddress:(id)arg1 viaInterface:(id)arg2 withTimeout:(double)arg3 error:(id*)arg4;
- (void)startConnectTimeout:(double)arg1;
- (void)lookup:(int)arg1 host:(id)arg2 port:(unsigned short)arg3;
- (BOOL)preConnectWithInterface:(id)arg1 error:(id*)arg2;
- (BOOL)connectToHost:(id)arg1 onPort:(unsigned short)arg2 viaInterface:(id)arg3 withTimeout:(double)arg4 error:(id*)arg5;
- (BOOL)connectToHost:(id)arg1 onPort:(unsigned short)arg2 withTimeout:(double)arg3 error:(id*)arg4;
- (void)setupReadAndWriteSourcesForNewlyConnectedSocket:(int)arg1;
- (BOOL)doAccept:(int)arg1;
- (unsigned short)localPort4;
- (id)badParamError:(id)arg1;
- (void)getInterfaceAddress4:(id*)arg1 address6:(id*)arg2 fromDescription:(id)arg3 port:(unsigned short)arg4;
- (BOOL)isDisconnected;
- (id)badConfigError:(id)arg1;
- (id)errnoErrorWithReason:(id)arg1;
- (void)closeWithError:(id)arg1;
- (id)initWithDelegate:(id)arg1 delegateQueue:(id)arg2 socketQueue:(id)arg3;
- (BOOL)acceptOnInterface:(id)arg1 port:(unsigned short)arg2 error:(id*)arg3;
- (unsigned short)localPort;
- (id)initWithDelegate:(id)arg1 delegateQueue:(id)arg2;
- (void)disconnectAfterWriting;
- (void)readDataToLength:(unsigned int)arg1 withTimeout:(double)arg2 tag:(long)arg3;
- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long)arg3;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 maxLength:(unsigned int)arg3 tag:(long)arg4;
- (void)startTLS:(id)arg1;
- (void)setDelegate:(id)arg1 delegateQueue:(id)arg2;
- (void)resumeReadSource;

@end
