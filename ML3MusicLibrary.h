/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk/System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

@class NSString, ML3Container, ML3NondurableWriteSet, ML3SqliteDatabase, ML3DatabaseMetadata, NSCountedSet, NSArray, NSObject<OS_dispatch_queue>, ML3MusicLibrary_SQLiteDatabaseContext, ML3UbiquitousDatabase, NSMutableArray, MLSQLiteConnection;

@interface ML3MusicLibrary : NSObject  {
    NSString *_path;
    BOOL _enableWrites;
    ML3MusicLibrary_SQLiteDatabaseContext *_mainDatabaseContext;
    ML3MusicLibrary_SQLiteDatabaseContext *_backgroundDatabaseContext;
    MLSQLiteConnection *_inMemoryDatabaseConnection;
    NSObject<OS_dispatch_queue> *_atomicityQueue;
    ML3UbiquitousDatabase *_ubiquitousDatabase;
    ML3SqliteDatabase *_geniusDatabase;
    NSCountedSet *_notifyNamesToIgnore;
    NSMutableArray *_pendingNotifyPostNames;
    NSString *_notifyName;
    int _notifyToken;
    NSString *_nonContentsNotifyName;
    int _nonContentsNotifyToken;
    NSString *_invisiblePropertyNotifyName;
    int _invisiblePropertyNotifyToken;
    NSString *_displayValuesNotifyName;
    int _displayValuesNotifyToken;
    NSString *_syncGenerationNotifyName;
    int _syncGenerationNotifyToken;
    NSString *_libraryUIDNotifyName;
    int _libraryUIDNotifyToken;
    BOOL _requiresProcessAssertion;
    int _backupDisabledCount;
    BOOL _backupNeeded;
    BOOL _hasEverConnectedToDatabase;
    id _mcSettingsObserver;
    id _loggingObserver;
    NSObject<OS_dispatch_queue> *_nondurableConcurrentQueue;
    ML3NondurableWriteSet *_nondurableWriteSet;
    NSString *_artworkDirectory;
    BOOL _artworkDirectoryFilesystemRepresentation[1024];
    BOOL _hasEverConnectedTo;
    BOOL _keepPresignedValidyAfterVerification;
}

@property(readonly) NSString * path;
@property(readonly) BOOL writable;
@property(getter=isNondurableWritingActive,readonly) BOOL nondurableWritingActive;
@property(readonly) NSArray * localizedSectionIndexTitles;
@property(readonly) ML3Container * purchasedTracksPlaylist;
@property(readonly) ML3DatabaseMetadata * databaseInfo;
@property(readonly) NSArray * preferredAudioTracks;
@property(readonly) NSArray * preferredSubtitleTracks;
@property(readonly) BOOL mediaRestrictionEnabled;
@property(readonly) BOOL requiresPostProcessing;
@property(readonly) BOOL hasEverConnectedToDatabase;
@property(readonly) long long persistentID;
@property(readonly) long long currentRevision;
@property(readonly) long long currentContentRevision;
@property long long syncGenerationID;
@property(readonly) long long autoFilledTracksTotalSize;
@property BOOL keepPresignedValidyAfterVerification;

+ (id)sortMapSchemaSQL;
+ (id)itemSchemaSQL;
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(BOOL)arg3 isFolder:(BOOL*)arg4;
+ (id)controlDirectoryPathWithBasePath:(id)arg1;
+ (id)mediaFolderPath;
+ (BOOL)dropIndexesUsingConnection:(id)arg1;
+ (id)storeLinkSchemaSQL;
+ (BOOL)_inTransactionUpdateSearchMapOnConnection:(id)arg1;
+ (BOOL)_inTransactionUpdateSortMapOnConnection:(id)arg1;
+ (BOOL)migrateToCurrentUserVersionUsingConnection:(id)arg1;
+ (id)indexSchemaSQL;
+ (BOOL)dropIndexesUsingConnection:(id)arg1 tableNames:(const char *)arg2;
+ (int)userVersionUsingConnection:(id)arg1;
+ (BOOL)buildDatabaseTablesUsingConnection:(id)arg1;
+ (BOOL)createIndexesUsingConnection:(id)arg1;
+ (id)itemIndexSchemaSQL;
+ (id)mediaFolderRelativePath:(id)arg1;
+ (int)currentUserVersion;
+ (id)allSchemaSQL;
+ (void)beginDatabaseMigrationIfNecessary;
+ (unsigned int)readableArtworkFormatIDForArtworkFormatID:(unsigned int)arg1;
+ (void)enumerateSortMapTablesUsingBlock:(id)arg1;
+ (id)sectionIndexTitleForSectionHeader:(id)arg1;
+ (id)localizedSectionIndexTitleForSectionHeader:(id)arg1;
+ (id)localizedSectionHeaderForSectionHeader:(id)arg1;
+ (BOOL)executeSQL:(id)arg1 usingHandle:(struct sqlite3 { }*)arg2;
+ (BOOL)updateTrackIntegrityOnConnection:(id)arg1;
+ (void)setImportationEnabled:(BOOL)arg1;
+ (BOOL)importationEnabled;
+ (BOOL)statementDidFinishAfterStepping:(struct sqlite3_stmt { }*)arg1;
+ (unsigned int)numberOfArtworkStyles;
+ (struct MLArtworkFormatSpec { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; int x5; int x6; BOOL x7; })artworkFormatSpecForArtworkFormatID:(unsigned int)arg1;
+ (id)_purgeableTrackPredicateWithUrgency:(int)arg1;
+ (BOOL)updateSortMapOnConnection:(id)arg1;
+ (id)systemCurrentLanguage;
+ (id)pathForResourceFileOrFolder:(int)arg1;
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(BOOL)arg3 createParentFolderIfNecessary:(BOOL)arg4;
+ (BOOL)orderingLanguageMatchesSystemUsingConnection:(id)arg1;
+ (BOOL)userVersionMatchesSystemUsingConnection:(id)arg1;
+ (id)_newDatabaseConnectionForPath:(id)arg1 enableWrites:(BOOL)arg2 forLibrary:(id)arg3;
+ (id)newDatabaseConnectionForPath:(id)arg1 enableWrites:(BOOL)arg2;
+ (id)fallbackGeniusDatabaseFilePath;
+ (id)geniusDatabaseFilePath;
+ (id)mainDatabasePath;
+ (void)connection:(id)arg1 willCloseDBHandle:(struct sqlite3 { }*)arg2;
+ (void)connection:(id)arg1 didOpenDBHandle:(struct sqlite3 { }*)arg2;
+ (id)sharedLibrary;
+ (void)_stepStatement:(struct sqlite3_stmt { }*)arg1 hasRow:(BOOL*)arg2 didFinish:(BOOL*)arg3;
+ (BOOL)statementHasRowAfterStepping:(struct sqlite3_stmt { }*)arg1;
+ (id)allArtworkFormatSizes;
+ (void)initialize;
+ (id)sectionIndexTitles;
+ (void)buildDatabaseFromHomeSharingConnection:(id)arg1 atPath:(id)arg2 completionHandler:(id)arg3;
+ (void)buildDatabaseFromHomeSharingConnection:(id)arg1 atPath:(id)arg2 completionHandler:(id)arg3 progressHandler:(id)arg4;

- (BOOL)importTracksFromDataSource:(id)arg1;
- (BOOL)importTracksFromDataSource:(id)arg1 progressHandler:(id)arg2;
- (id)_insertIntoChapterUsingVtabSQL;
- (id)_replaceIntoPurgeableListUsingVtabSQL;
- (id)_insertIntoPurgeableListUsingVtabSQL;
- (id)_insertIntoItemSearchUsingVtabSQL;
- (id)_insertIntoItemStatsUsingVtabSQL;
- (id)_insertIntoItemExtraUsingVtabSQL;
- (id)_insertIntoItemUsingVtabSQL;
- (void)_populateNameOrderForPID:(struct unordered_map<long long, ML3NameOrder, std::tr1::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, ML3NameOrder>>, false> { struct _Select1st<std::pair<const long long, ML3NameOrder> > { } x1; struct equal_to<long long> { } x2; struct hash<long long> { } x3; struct _Mod_range_hashing { } x4; struct allocator<std::tr1::__detail::_Hash_node<std::pair<const long long, ML3NameOrder>, false> > { } x5; struct _Hash_node<std::pair<const long long, ML3NameOrder>, false> {} **x6; unsigned int x7; unsigned int x8; struct _Prime_rehash_policy { float x_9_1_1; float x_9_1_2; unsigned long x_9_1_3; } x9; }*)arg1 table:(id)arg2 nameSQL:(id)arg3;
- (long long)_albumPIDFromDataSource:(id)arg1 sortableNames:(id)arg2 albumArtistPID:(long long)arg3 existingAlbumStatesForGroupingIdentifiers:(id)arg4 insertIntoAlbumStatement:(id)arg5 groupingKeysForGroupingNames:(id)arg6;
- (id)_insertIntoAlbumStatement;
- (id)_existingAlbumStatesForGroupingIdentifiers:(id)arg1;
- (long long)_baseLocationPIDFromDataSource:(id)arg1;
- (long long)_locationKindPIDFromDataSource:(id)arg1;
- (long long)_genrePIDFromDataSource:(id)arg1 sortableNames:(id)arg2 existingGenrePIDsForGroupingKeys:(id)arg3 insertIntoGenreStatement:(id)arg4;
- (long long)_composerPIDFromDataSource:(id)arg1 sortableNames:(id)arg2 existingComposerPIDsForGroupingKeys:(id)arg3 insertIntoComposerStatement:(id)arg4;
- (long long)_albumArtistPIDFromDataSource:(id)arg1 sortableNames:(id)arg2 existingAlbumArtistPIDsForGroupingKeys:(id)arg3 insertIntoAlbumArtistStatement:(id)arg4;
- (long long)_artistPIDFromDataSource:(id)arg1 sortableNames:(id)arg2 existingArtistPIDsForGroupingKeys:(id)arg3 insertIntoItemArtistStatement:(id)arg4;
- (id)_insertIntoGenreStatement;
- (id)_insertIntoComposerStatement;
- (id)_insertIntoAlbumArtistStatement;
- (id)_insertIntoItemArtistStatement;
- (id)_existingCollectionPIDsForTable:(id)arg1 groupingNames:(id)arg2 groupingKeysForGroupingNames:(id)arg3;
- (id)_genreGroupingNameFromDataSource:(id)arg1;
- (id)_composerGroupingNameFromDataSource:(id)arg1;
- (id)_albumArtistGroupingNameFromDataSource:(id)arg1;
- (id)_artistGroupingNameFromDataSource:(id)arg1;
- (id)_albumGroupingIdentifierFromDataSource:(id)arg1 albumArtistPersistentID:(long long)arg2 groupingKeysForGroupingNames:(id)arg3;
- (id)locationKindForKind:(id)arg1;
- (BOOL)resetAllContents;
- (BOOL)removeLocationsForItemsMissingAssets;
- (id)_insertStringsIntoSortMapOrFail:(id)arg1;
- (BOOL)deleteAndRecreateDatabaseUsingConnection:(id)arg1;
- (BOOL)populateArtworkCacheWithArtworkData:(id)arg1 trackValues:(id)arg2;
- (BOOL)buildDatabaseTables;
- (void)updateOrderingLanguagesForCurrentLanguage;
- (BOOL)handlePrepareDatabase;
- (BOOL)updateActivePlaylistNamesForCurrentLanguage;
- (id)albumArtistForEffectiveAlbumArtistName:(id)arg1;
- (id)composerForComposerName:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1;
- (id)genreForGenre:(id)arg1;
- (id)albumForAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(id)arg4 compilation:(BOOL)arg5;
- (id)artistForArtistName:(id)arg1 seriesName:(id)arg2;
- (id)artistGroupingKeyForArtistName:(id)arg1 seriesName:(id)arg2;
- (void)setKeepPresignedValidyAfterVerification:(BOOL)arg1;
- (BOOL)hasEverConnectedToDatabase;
- (void)removeOrphanedTracks;
- (id)appleIDForDSID:(unsigned long long)arg1;
- (BOOL)setAppleID:(id)arg1 forDSID:(unsigned long long)arg2;
- (void)migrateAlbumListJPEGToBGRA;
- (void)migrateAlbumGridBGRA1xToJPEG1x;
- (BOOL)migrateLegacyArtworkFromArtworkBlobFilePath:(id)arg1;
- (BOOL)deleteAllArtwork;
- (BOOL)insertArtworkWithImageData:(id)arg1 forCacheID:(id)arg2;
- (BOOL)hasArtworkForCacheID:(id)arg1;
- (void)loadArtworkForCacheID:(id)arg1 formatID:(unsigned int)arg2 completionHandler:(id)arg3;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1;
- (long long)autoFilledTracksTotalSize;
- (void)getChangedPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(int)arg2 usingBlock:(id)arg3;
- (BOOL)persistentID:(long long)arg1 changedAfterRevision:(long long)arg2 revisionTrackingCode:(int)arg3;
- (void)setSyncGenerationID:(long long)arg1;
- (long long)currentContentRevision;
- (long long)currentRevision;
- (BOOL)updateSortMap;
- (long long)addStringToSortMap:(id)arg1;
- (BOOL)_mustProcessLanguageChange;
- (void)savePlaylists;
- (void)saveTrackMetadata;
- (id)purchasedTracksPlaylist;
- (void)performTransactionKind:(int)arg1 withBlock:(id)arg2;
- (void)performTransactionAllowingWrites:(BOOL)arg1 withBlock:(id)arg2;
- (id)groupingKeysForStrings:(id)arg1;
- (id)groupingKeyForString:(id)arg1;
- (BOOL)populateStaticItemsOfDynamicContainers;
- (void)migratePresignedValidity;
- (BOOL)hasPresignedValidity;
- (BOOL)_runStatementWithSQL:(id)arg1 bindingValue:(id)arg2 :(id)arg3;
- (void)_accessAccountCacheDBForSQL:(id)arg1 usingBlock:(id)arg2;
- (void)_migrateArtworkFrom:(unsigned int)arg1 to:(unsigned int)arg2;
- (void)notifyDisplayValuesPropertyDidChange;
- (BOOL)deleteArtworkForCacheID:(id)arg1 formatID:(unsigned int)arg2;
- (BOOL)deleteArtworkForCacheID:(id)arg1;
- (BOOL)writeToDatabaseArtworkForCacheID:(id)arg1 length:(unsigned long)arg2 formatID:(unsigned int)arg3 imageSubRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4;
- (BOOL)writeToDiskArtworkWithImageData:(id)arg1 forCacheID:(id)arg2 resultingLengths:(unsigned int**)arg3 formatIDs:(unsigned int**)arg4 imageSubRects:(struct CGRect {}**)arg5 count:(unsigned int*)arg6;
- (BOOL)_drawAndWriteImage:(struct CGImage { }*)arg1 outputWidth:(unsigned long)arg2 outputHeight:(unsigned long)arg3 colorSpace:(struct CGColorSpace { }*)arg4 cacheID:(id)arg5 formatID:(unsigned int)arg6 artworkStyle:(struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; }*)arg7 resultingImageSubRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg8 resultingLength:(unsigned int*)arg9;
- (BOOL)hasArtworkForCacheID:(id)arg1 ensureArtworkFileExists:(BOOL)arg2;
- (id)artworkDataForCacheID:(id)arg1 formatID:(unsigned int)arg2;
- (BOOL)compactArtwork;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(int)arg2 respectSongMattress:(BOOL)arg3;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(int)arg2;
- (void)_enumeratePurgeableTracksForUrgency:(int)arg1 respectSongMattress:(BOOL)arg2 usingBlock:(id)arg3;
- (long long)autoFilledTracksTotalSizeWithUrgency:(int)arg1 respectSongMattress:(BOOL)arg2;
- (long long)autoFilledTracksTotalSizeWithUrgency:(int)arg1;
- (BOOL)setValue:(id)arg1 forDatabaseProperty:(id)arg2;
- (long long)insertStringIntoSortMapNoTransaction:(id)arg1;
- (struct { long long x1; int x2; })nameOrderForString:(id)arg1;
- (id)valueForDatabaseProperty:(id)arg1;
- (void)_delayableNotifyPost:(id)arg1 localNotificationName:(id)arg2;
- (long long)_int64ValueForFirstRowAndColumnWithSQL:(id)arg1;
- (void)savePlaylistsSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (void)saveTrackMetadataSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (id)databaseInfo;
- (void)_scheduleCommitNondurableWritesAfterTimeInterval:(double)arg1;
- (BOOL)_commitNondurableWrites;
- (void)_postDisplayValuesChangeNotificationLocalOnly:(BOOL)arg1;
- (void)_postInvisiblePropertyChangeNotificationAndScheduleFlushLocalOnly:(BOOL)arg1;
- (void)_postNonContentsChangeNotificationAndScheduleFlushLocalOnly:(BOOL)arg1;
- (void)_postChangeNotificationAndScheduleFlushLocalOnly:(BOOL)arg1;
- (void)performTransactionKind:(int)arg1 waitIfBusy:(BOOL)arg2 withBlock:(id)arg3;
- (id)statementWithSQL:(id)arg1;
- (BOOL)_writeCGImage:(struct CGImage { }*)arg1 length:(unsigned long)arg2 forCacheID:(id)arg3 formatID:(unsigned int)arg4 imageSubRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg5;
- (BOOL)_writeImageBytes:(const void*)arg1 length:(unsigned long)arg2 formatID:(unsigned int)arg3 cacheID:(id)arg4;
- (BOOL)deleteDatabase;
- (void)accessSortKeyBuilder:(id)arg1;
- (void)_accessDatabaseContextUsingBlock:(id)arg1;
- (void)reconnectToDatabaseWithCompletionHandler:(id)arg1;
- (BOOL)runStatementWithSQL:(id)arg1 bindingValue:(id)arg2;
- (BOOL)requiresPostProcessing;
- (id)_newGeniusDBConnectionAtPath:(id)arg1;
- (BOOL)coerceValidDatabase;
- (void)resetUbiquitousMetadata;
- (id)ubiquitousDatabase;
- (void)deletePresignedValidity;
- (BOOL)keepPresignedValidyAfterVerification;
- (void)updateTrackIntegrity;
- (BOOL)verifyPresignedValidity;
- (void)_enumerateDatabaseContextsUsingBlock:(id)arg1;
- (void)reconnectToDatabase;
- (void)_postLibraryNotification:(id)arg1 isSourceExternal:(BOOL)arg2 userInfo:(id)arg3;
- (id)initWithPath:(id)arg1 enableWrites:(BOOL)arg2;
- (void)_onBackgroundQueuePerformDatabaseContextBlock:(id)arg1;
- (void)_onMainQueuePerformDatabaseContextBlock:(id)arg1;
- (id)newDatabaseConnection;
- (void)accessConnectionUsingBlock:(id)arg1;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned int)arg2 usingBlock:(id)arg3;
- (BOOL)createIndexes;
- (BOOL)dropItemIndexes;
- (void)statementWithSQLPrefix:(id)arg1 inPersistentIDs:(const long long*)arg2 count:(unsigned int)arg3 usingBlock:(id)arg4;
- (void)notifyInvisiblePropertyDidChange;
- (void)notifyNonContentsPropertyDidChange;
- (id)nondurableWriteSetForReading;
- (void)notifyContentsDidChange;
- (id)nondurableWriteSetForWriting;
- (void)statementWithSQL:(id)arg1 usingBlock:(id)arg2;
- (BOOL)isNondurableWritingActive;
- (void)statementWithSQL:(id)arg1 cache:(BOOL)arg2 usingBlock:(id)arg3;
- (void)accessDatabaseUsingBlock:(id)arg1;
- (void)prepareStatementForSQL:(id)arg1 usingBlock:(id)arg2;
- (id)geniusDatabase;
- (void)performTransactionWithBlock:(id)arg1;
- (BOOL)executeSQL:(id)arg1;
- (void)prepareStatementForSQL:(id)arg1 cache:(BOOL)arg2 usingBlock:(id)arg3;
- (BOOL)mediaRestrictionEnabled;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 usingBlock:(id)arg2;
- (id)preferredSubtitleTracks;
- (id)preferredAudioTracks;
- (void)setLibraryUID:(id)arg1;
- (id)libraryUID;
- (unsigned int)sectionIndexTitleIndexForSectionIndex:(unsigned int)arg1;
- (id)localizedSectionHeaderForSectionIndex:(unsigned int)arg1;
- (id)localizedSectionIndexTitles;
- (BOOL)writable;
- (long long)syncGenerationID;
- (long long)persistentID;
- (BOOL)isReadable;
- (void)dealloc;
- (void).cxx_destruct;
- (id)path;
- (void)clearTrackAndCollectionCloudStatus;
- (void)fillContainerForHomeSharingConnection:(id)arg1 containerID:(long long)arg2 completionHandler:(id)arg3;
- (void)checkForChangesOnConnection:(id)arg1 completionHandler:(id)arg2;

@end
